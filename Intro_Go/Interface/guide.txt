

type Shape interface {
	area() float64
}

type Circle struct {
	radius float64
}

type Rect struct {
	width  float64
	height float64
}

func (r Rect) area() float64 {
	return r.width * r.height
}

func (c Circle) area() float64 {
	return math.Pi * c.radius * c.radius
}

func main() {

	c1 := Circle{radius: 4.5}
	r1 := Rect{width: 5, height: 7}

	shapes := []Shape{c1, r1}

	fmt.Println(shapes[0].area())
	fmt.Println(shapes[1].area())

}


*****************************************


type shape interface {
	area() float64
	perimeter() float64
}

type rect struct {
	width  float64
	height float64
}

func (r rect) area() float64 {
	return r.width * r.height
}

func (r rect) perimeter() float64 {
	return 2*r.width + 2*r.height
}

type circle struct {
	radius float64
}

func (c circle) area() float64 {
	return math.Pi * c.radius * c.radius
}

func (c circle) perimeter() float64 {
	return 2 * math.Pi * c.radius * c.radius
}

func main() {

	r := rect{
		width:  2,
		height: 3,
	}

	c := circle{
		radius: 2.4,
	}

	fmt.Println(r.area())
	fmt.Println(r.perimeter())

	fmt.Println(c.area())
	fmt.Println(c.perimeter())
}


*****************************************


    *** Example ***

func sendMessage(msg message) {
	fmt.Println(msg.getMessage())
}

type message interface {
	getMessage() string
}

type birthdayMessage struct {
	birthdayTime int
	recipentName string
}

func (bm birthdayMessage) getMessage() string {
	return fmt.Sprintf("Hi %s, it is your birthday on %v", bm.recipentName, bm.birthdayTime)
}

type sendingReport struct {
	reportName   string
	numberOfsend int
}

func (sr sendingReport) getMessage() string {
	return fmt.Sprintf("Your %s report is  ready. You've sent %v", sr.reportName, sr.numberOfsend)
}

func main() {

	s := sendingReport{
		reportName:   "first",
		numberOfsend: 10,
	}
	sendMessage(s)

	b := birthdayMessage{
		birthdayTime: 1971,
		recipentName: "Jansen",
	}
	sendMessage(b)
}


*****************************************


    *** Example ***


type expense interface {
	cost() float64
}

type printer interface {
	print()
}

func (e email) cost() float64 {
	if !e.isSubscribed {
		return 0.05 * float64(len(e.body))
	}
	return 0.01 * float64(len(e.body))
}

func (e email) print() {
	fmt.Println(e.body)
}

type email struct {
	isSubscribed bool
	body         string
}

func test(e expense, p printer) {
	fmt.Printf("Printing with cost: $%.2f ...\n", e.cost())
	p.print()
}

func main() {

	e := email{
		isSubscribed: false,
		body:         "I want ny money back",
	}
	test(e, e)

}


*****************************************


    *** Type Assertions Example ***


func getExpenReport(e expense) (string, float64) {

	email, ok := e.(email) // assertion
	if ok {
		return email.toAddress, email.cost()
	}
	sms, ok := e.(sms)
	if ok {
		return sms.toPhoneNumber, sms.cost()
	}
	return "", 0.0

}

type expense interface {
	cost() float64
}

type printter interface {
	print()
}

func (e email) cost() float64 {
	if !e.isSubscribed {
		return 0.05 * float64(len(e.body))
	}
	return 0.01 * float64(len(e.body))
}

func (s sms) cost() float64 {
	if !s.isSubscribed {
		return .1 * float64(len(s.body))
	}
	return 0.03 * float64(len(s.body))
}

type email struct {
	isSubscribed bool
	body         string
	toAddress    string
}

type sms struct {
	isSubscribed  bool
	body          string
	toPhoneNumber string
}

func main() {

	e := email{
		isSubscribed: true,
		body:         "I want my money back",
		toAddress:    "aaaaa@bbbbb.com",
	}

	sms := sms{
		isSubscribed:  false,
		body:          "Confirmation Code",
		toPhoneNumber: "12113123123",
	}

	fmt.Println(getExpenReport(e))
	fmt.Println("******************")
	fmt.Println(getExpenReport(sms))

}