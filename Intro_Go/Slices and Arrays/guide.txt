

// Arrays //



var myInts [10]int

primes := [6]{2, 3, 5, 7, 11, 13}


    ** Example **

func getMessageWithRetries() [3]string {
	return [3]string{"click here to sign up", "pretty please click here", "we beg you to sign up"}

}

func send(name string, doneAt int) {
	fmt.Printf("Sending to %v...", name)
	fmt.Println()

	messages := getMessageWithRetries()
	for i := 0; i < len(messages); i++ {
		msg := messages[i]
		fmt.Printf(`sending: "%v"`, msg)
		fmt.Println()
		if i == doneAt {
			fmt.Println("they responded")
			break
		}
		if i == len(messages)-1 {
			fmt.Println("complete failure")
		}
	}
}

func main() {
	send("Sally", 0)
	send("Alice", 1)
	send("Mangalam", 2)
	send("Moin", 3)
}



************************************


// Slices //

courses := []string{"python", "c#", "go", "java"}

fmt.Println(courses)

courses = append(courses[:2], courses[3:]...) // remove a value from slices based on index

fmt.Println(courses)


************************************


const (
	planFree = "free"
	planPro  = "pro"
)

func getMessageWithRetriesForPlan(plan string) ([]string, error) {
	allMessages := getMessageWithRetries()
	if plan == planPro {
		return allMessages[:], nil
	}
	if plan == planFree {
		return allMessages[:2], nil
	}
	return nil, errors.New("unsupported plan")
}

func getMessageWithRetries() [3]string {
	return [3]string{"click here to sign up", "pretty please click here", "we beg you to sign up"}
}

func send(name string, doneAt int, plan string) {
	fmt.Printf("Sending to %v...", name)
	fmt.Println()

	messages, err := getMessageWithRetriesForPlan(plan)
	if err != nil {
		fmt.Println("Error: ", err)
	}
	for i := 0; i < len(messages); i++ {
		msg := messages[i]
		fmt.Printf(`sending: "%v"`, msg)
		fmt.Println()
		if i == doneAt {
			fmt.Println("they responded")
			break
		}
		if i == len(messages)-1 {
			fmt.Println("no response")
		}
	}
}

func main() {
	send("Sally", 3, planFree)
	send("Alice", 1, planPro)
	send("Mangalam", 2, planPro)
	send("Moin", 0, "no pplan")

}


************************************


// func make([]T, len, cap) 

mySlice := make([]int, 5, 10)

mySlice := make([]int, 5)

mySlice := []string("I", "love", "go")


************************************


    ** Example **


func getMessageCosts(messages []string) []float64 {
	costs := make([]float64, len(messages))
	for i := 0; i < len(messages); i++ {
		message := messages[i]
		cost := float64(len(message)) * 0.01
		costs[i] = cost
	}
	return costs
}

func test(messages []string) {
	costs := getMessageCosts(messages)
	fmt.Println("Messages")
	for i := 0; i < len(messages); i++ {
		fmt.Printf(" - %v\n", messages[i])
	}
	fmt.Println("Costs")
	for i := 0; i < len(costs); i++ {
		fmt.Printf(" - %v\n", costs[i])
	}
}

func main() {
	messages := []string{"Hello", "Welcome", "Go"}
	test(messages)
}


************************************

    ** Example **

type Guest struct {
	Name        string
	BringinGift bool
}

func main() {

	guestLists := []Guest{
		{Name: "Alice", BringinGift: true},
		{Name: "Bob", BringinGift: false},
		{Name: "Charlie", BringinGift: true},
	}

	newGuest := Guest{Name: "Diana", BringinGift: false}
	guestLists = append(guestLists, newGuest)

	giftCount := 0
	for _, guest := range guestLists {
		if guest.BringinGift {
			giftCount++
		}
	}

	fmt.Println("Party Guest List:")
	for i, guest := range guestLists {
		fmt.Printf("Guest %d: Name = %s, BrBringing Gift = %v\n", i+1, guest.Name, guest.BringinGift)
	}
	fmt.Printf("Total guests bringing gifts: %d\n", giftCount)

}


    ** Example **


type PicnicItem struct {
	Name     string
	Quantity int
}

func countTotalItems(basket []PicnicItem) int {
	total := 0
	for _, item := range basket {
		total = total + item.Quantity
	}
	return total
}

func main() {

	basket := []PicnicItem{
		{Name: "Sandwich", Quantity: 3},
		{Name: "Apple", Quantity: 4},
		{Name: "Water Bottle", Quantity: 2},
	}

	totalItems := countTotalItems(basket)

	for i, item := range basket {
		fmt.Printf("Item %d: %s - Quantity: %d\n", i+1, item.Name, item.Quantity)
	}
	fmt.Printf("Total number of items: %d\n", totalItems)

}