// Variable Declartion //

    var foo int
    var foo int = 42
    foo := 42

    - Can't redeclare variables, but can shadow them. 

    - All variables must be used.

    - Visibility
        * lover case first letter for package scope
        * upper case first letter to export
        * no private scope


    - Naming Conventions
        * Pascal or camelCase
        * Capitalize acronyms (HTTP, URL)
        * As short as reasonable
        * longer names for longer lives

    - Type Conversions
        * Destination Type (variavble)
        * Use strconv package for strings.


// Primitives //

    - Boolean Type
        
        * Values are true or false
        * Not an alias for other types (e.g. int)
        * Zero values is false

        var n bool ---> false (default)
        
        var n bool = true
        var n bool = false

        n := 1 == 1 ---> true
        m := 1 == 2 ---> false

    - Numeric Types
        
        * Integer *

            // Signed Integers //
            - int type has varying size, but min 32 bits
            - 8 bit (int8) through 64 bit (int64)

            // Unsigned Integers //
            - 8 bit (byte and uint8) through 32 bit (uint32)
            
            n := 4
            a := 10 // 1010
            b := 3  // 0011
            
            fmt.Println(a + b) ---> 13
            fmt.Println(a - b) ---> 7
            fmt.Println(a * b) ---> 30
            fmt.Println(a / b) ---> 3
            fmt.Println(a % b) ---> 1

            // Bitwise Operations //
            
            fmt.Println(a & b) ---> 0010 ---> 2
            fmt.Println(a | b) ---> 1011 ---> 11
            fmt.Println(a ^ b) ---> 1001 ---> 9
            fmt.Println(a &^ b) ---> 0100 ---> 8

        * Float *
        
            var n float = 3.14
            n := 13.7e72
            n := 2.IE14

    - Text Types

        * String *

           - UTF-8
           - Immutable
           - Can be concatenated with plus (+) operator
           - Can be converted to []byte

            s := "this is a string"
            s2 := "this is also string"
            fmt.Println(s + s2) ---> this is a stringthis is also string

        * Rune *

            - UTF-32
            - Alias for int32
            - Special methods normally required to process
            - e.g. strings.Reader (#ReadRune)

            var r rune = 'a'
            r := 'a'
            fmt.Printf("%v, %T\n", r, r) ---> 97, int


// Constant //

    - Immutable, but can be shadowed
    - Replaced by the compiler at compile time
        * Value must be calculable at compile time

    - Named  like variables
        * PascalCode for exported constants
        * camelCase for internal constants
    
    - Typed constants work like immutable variables
        * Can interoperate only with same type.

    - Untyped constants work like literals
        * Can interoperate with similar types
    
    - Enumerated  constants
        * Special symbol 'iota' allows related  constants to be created easily
        * 'Iota' starts at '0' in each const block and incremenets by one.
        * Watch out of contant values that match zero values for variables.

    - Enumerated Expressions
        * Operations that can be determined at compile time are allowed
        * Arithmetic
        * Bitwise Operations
        * Bitshifting



    const myConst int = 4
    const a = 42

    const (
        a = iota
        b = iota
        c = iota
    )
    fmt.Printf("%v", a) ---> 0
    fmt.Printf("%v", b) ---> 1
    fmt.Printf("%v", c) ---> 2

    
// Arrays and Slices //

    - Arrays

        * Collection of items with same type
        * Fixed size
        * Declartion styles
            - a := [3]int{1, 2, 3}
            - a := [...]int{1, 2, 3}
            - var a [3]int
        * Access via zero-based index
            - a := [3]int{1, 3, 5} // a[1] == 3
        * 'len' function return  sizes of arrays
        *  Copies refer to different underlying data.

        var students [3]string
        fmt.Printf("Students : %v", students) ---> []
        students[0] = "Lisa"
        students[1] = "Kobe"
        students[2] = "Tesla"
        fmt.Printf("Students : %v", students) ---> [Lisa Kobe Tesla]
        fmt.Printf("Number of Students : %v", len(students)) ---> Number of Students : 3


        grades := [3]int{97, 85, 93}
        fmt.Printf("Grades : %v", grades) ---> Grades : [97 85 93]


        var identyMaritx [3][3] int
        identyMaritx[0] = [3]int{1, 0, 0}
        identyMaritx[1] = [3]int{0, 1, 0}
        identyMaritx[2] = [3]int{0, 0, 1}
        fmt.Println(identyMaritx) ---> [[1, 0, 0] [0, 1, 0] [0, 0, 1]]


        a := [...]int{1, 2, 3}
        b := a
        b[1] = 5
        fmt.Println(a) ---> [1 2 3]
        fmt.Println(b) ---> [1 5 3]


    - Slices

        * Backed by array
        * Creation styles
            - Slice existing array of slice
            - Literal style
            - Via make function
                * a := make([]int, 10) // create slice with capacity and length == 10
                * a := make([]int, 10, 100) // slice with length == 10 and capacity == 100
        * 'len' function returns length of slice
        * 'cap' function returns length of underlying arrray
        * 'append' function to add element to slice
            - May cause expensive copy operation if underlying arrays is to small
        * Copies refer to same underlying array.        

        a := []int{1, 2, 3}
        fmt.Println(a) ---> [1 2 3]
        fmt.Printf("Length :  %v", len(a)) --->  Length : 3
        fmt.Printf("Capacity :  %v", cap(a)) --->  Capacity : 3

        a := []int{1, 2, 3}
        b := a
        b[1] = 5
        fmt.Println(a) ---> [1 5 3]
        fmt.Println(b) ---> [1 5 3]


        a := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
        b := a[:] // slice of all elements
        c := a[3:] // slice from 4th element to end
        d := a[:6] // slice first 6 elements
        e := a[3:6] // slice the 4th, 5th, and 6th elements

        fmt.Println(b) ---> [1 2 3 4 5 6 7 8 9 10]
        fmt.Println(c) ---> [5 6 7 8 9 10]
        fmt.Println(d) ---> [1 2 3 4 5 6]
        fmt.Println(e) ---> [4 5 6]

        -- 'make' function -- 
        a := make([]int, 3, 100) // (slice_type, slice_length, slice_capacity)
        fmt.Println(a) ---> [0 0 0]
        fmt.Printf("Length :  %v", len(a)) --->  Length : 3
        fmt.Printf("Capacity :  %v", cap(a)) --->  Capacity : 100

        a := []int{}
        fmt.Println(a) ---> []
        fmt.Printf("Length :  %v", len(a)) --->  Length : 0
        fmt.Printf("Capacity :  %v", cap(a)) --->  Capacity : 0

        -- 'append' function --
        a = append(a, 1) // (source, element)
    
        fmt.Println(a) ---> [1]
        fmt.Printf("Length :  %v", len(a)) --->  Length : 1
        fmt.Printf("Capacity :  %v", cap(a)) --->  Capacity : 2

        a = append(a, 2, 3, 4, 5)
        fmt.Println(a) ---> [1 2 3 4 5]
        fmt.Printf("Length :  %v", len(a)) --->  Length : 5
        fmt.Printf("Capacity :  %v", cap(a)) --->  Capacity : 8

        a := []int{1, 2, 3, 4, 5}
        b := append(a[:2], a[3:]...)
        fmt.Println(b) ---> [1 2 4 5]


// Maps and Structs //


    - Maps

        * Collection of value types that are accessed via keys
        * Created via literals or via 'make' function
        * Members accessed via '[key]' syntax
            - myMap["key"] = "value"
        * Check for presence with "value, ok" form of result
        * Multiple assigments refer to same underlying data

        statePopulations := map[string]int{ // map[key]value
            "California" : 39250017,
            "Texas" :      27862589,
            "Florida" :    20612439,
            "New York" :   19745289,
        }
        fmt.Println(statePopulations) ---> map[California:39250017 Florida:20612439 New York:19745289 Texas:27862589]

        -- 'make' function --
        statePopulations := make(map[string]int) // create empty map

        fmt.Println(statePopulations["Texas"]) ---> 27862589

        statePopulations["Georgia"] = 10310371
        fmt.Println(statePopulations["Georgia"]) ---> 10310371

        delete(statePopulations, "Georgia") // delete element from the map
        fmt.Println(statePopulations["Georgia"]) ---> 0

    - Structs 

        * Collection of disparete data types that describe a single concept
        * Keyed bt named fields
        * Normally created as types, but anonymous structs are allowed
        * Structs are value types
        * No inheritance, but can use composition via embedding
        * Tags can be added to struct fields to describe field 

        type Doctor struct{
            number int
            actorName string
            companions []string
        }

        aDoctor := Doctor{
            number : 3,
            actorName : "Moritz Platz"
            companions : []string{
                "Liz Shaw",
                "Jo Grant",
                "Sarah Jane Smith",
            }
        }



        fmt.Println(aDoctor) --->  {3 Moritz Platz [Liz Shaw Jo Grant Sarah Jane Smith]}

        fmt.Println(aDoctor.actorName) ---> Moritz Platz
        fmt.Println(aDoctor.number) ---> 3
        fmt.Println(aDoctor.companions[1]) ---> Jo Grant

        aDoctor := struct{name string}(name : "Moritz Platz")
        anotherDoctor := aDoctor
        anotherDoctor.name = "Tom Baker"
        fmt.Println(aDoctor) ---> {Moritz Platz}
        fmt.Println(anotherDoctor) ---> {Tom Baker}


        -- Composition -- 

            type Animal struct{
                Name string
                Origin string
            }

            type Bird struct{
                Animal
                SpeedKPH float32
                CanFly bool
            }

            b := Bird{
                Animal 
            }


            b := Bird{}
            b.Name = "Emu"
            b.Origin = "Australia"
            b.SpeedKPH = 48
            b.CanFly = false
            fmt.Println(b) ---> {{Emu Australia} 48 false}

        -- Tags -- 

            type Animal struct{
                Name string `required max: "100"`
                Origin string ``
            }

            t := reflect.TypeOf(Animal{})
	        field, _ := t.FieldByName("Name")
	        fmt.Print(field.Tag) ---> required max:"100"


// Control Flow //

    - If Statements

        number := 50
        guess := 30 // guess := 50, guess := 100, guess := -5, guess := 105 
        
        if guess < 1 {
            fmt.Println("The guess must be greater than 1!")
        }else if guess > 100{
            fmt.Println("The guess must be less than 100!)
        } else {
            if guess >= 1 && <= 100 {
                if guess < number {
                    fmt.Println("To low")
                }
                if guess > number {
                    fmt.Println("To high")
                }
                if guess == number {
                    fmt.Println("You got it!")
                }
            } 
        }    



    - Switch Statements

        switch 2 {
	    case 1:
		    fmt.Println("one")
	    case 2:
		    fmt.Println("two")
	    case 3:
		    fmt.Println("three")
	    default:
		    fmt.Println("not one or two or three")
	    }


        switch 4 {
            case 1, 5, 10:
                fmt.Println("one, five or ten")
            case 2, 4, 6:
                fmt.Println("two, four or six")
            default:
                fmt.Println("another number")
        }


        switch i := 2 + 3; i { // i = 5
	    case 1, 5, 10:
		    fmt.Println("one, five or ten")
	    case 2, 4, 6:
		    fmt.Println("two, four, six")
	    default:
		    fmt.Println("another number")
	    }


        i := 10
	    switch {
	    case i <= 10:
		    fmt.Println("less than or equal to ten")
	    case i <= 20:
		    fmt.Println("less than or equal to twenty")
	    default:
		    fmt.Println("greater than twenty")
	    }


// Looping //

    - For Statements

        for i:=0; i < 5; i++{
            fmt.Println(i)
        }


        i := 0
        for ; i < 5; i++{
            fmt.Println(i)
        }

        i := 0
	    for i < 5 {
		    fmt.Println(i)
		    i++
	    }

        s := []int{1, 2, 3}
	    for k,v := range s { // k = index, v = value
            fmt.Println(k, v) 
        }

        statePopulations := map[string]int{ // map[key]value
		"California": 39250017,
		"Texas":      27862589,
		"Florida":    20612439,
		"New York":   19745289,
	    }

	    for _, v := range statePopulations {
		    fmt.Println(v)
	    }


// Control Flow //

    * Used to delay execution of a statement until function exist.
    * Useful to group "open" and "close" functions together
    * Be careful in loops
    * Run in LFO (last,in, firs-out) order


                                output
    fmt.Println("start")        start
    fmt.Println("middle")       middle
    fmt.Println("end")          end


    - Defer

                                        output
        fmt.Println("start")            start
        defer fmt.Println("middle")     end
        fmt.Println("end")              middle


                                        output
        defer fmt.Println("start")      end
        defer fmt.Println("middle")     start
        fmt.Println("end")              middle


                                        output
        defer fmt.Println("start")      end
        defer fmt.Println("middle")     middle
        defer fmt.Println("end")        start


                                        output
        fmt.Println("counting")         counting
                                        done
	    for i := 0; i < 10; i++ {       0
		    defer fmt.Println(i)        1
	    }                               2    
                                        3
	    fmt.Println("done")             ...


    - Panic

        * Occur when program cannot continue at all
        * Don't use when file can't be opened, unless it is critical
        * Use for unrecoverable events-cannot obtain TCP port for web server


// Pointers //

    * Pointers types use an asteriks (*) as a prefix to type pointed to
        ---> *int - a pointer to an Integer
    * Use the addresof operator (&) to get address of variable 

    * Dereference a pointer by preceding with an asteriks (*)
    * Complex types (e.g. structs) are automatically dereferenced

    * Create pointer to objects
    * Can use the addressof operator (&) if value type already exists.
        ---> ms := myStruct{foo:42}
        ---> p := &ms 
    * Use addressof operator before initializer
        ---> &myStruct{foo:42}
    * Use the 'new' keyword
        ---> Can't initialize field at the same time

    

    a := 42
	b := a
	fmt.Println(a, b) ---> 42 42
	a = 4
	fmt.Println(a, b) ---> 4  42


    var a int = 42
	fmt.Print(&a) --->  0xc00000a0e8

    var a int = 42
	var b *int = &a
	fmt.Print(a, b) ---> 42 0xc00000a0e8


    var a int = 42
	var b *int = &a
	fmt.Print(&a, b) ---> 0xc00000a0e8 0xc00000a0e8

    var a int = 42
	var b *int = &a
	fmt.Println(a, *b) ---> 42 42

    var a int = 42
	var b *int = &a
	fmt.Println(a, *b) ---> 42 42
	a = 27
	fmt.Println(a, *b) ---> 27 27


    var a int = 42
	var b *int = &a
	fmt.Println(a, *b) ---> 42 42
	a = 27
	fmt.Println(a, *b) ---> 27 27
	*b = 14
	fmt.Println(a, *b) ---> 14 14


    a := [3]int{1, 2, 3}
	b := &a[0]
	c := &a[1]
	fmt.Printf("%v %p %p", a, b, c) ---> [1 2 3] 0xc000014108 0xc000014110



// Functions //

    * Basic syntax
        - func foo(){
            ....
        }
    
    * Parameters
        - Comma delimited list of variables and types
        - func foo(bar string, baz int)
        - Parameters of same type list type once
            * func foo(bar, baz int)
        - When pointers are passed in, the function can change the value in the caller
            * This is always true for data of slices and maps
        - Use variadic parameters to send list of same types in
            * Must be last parameters
            * Received as a slice
            * func foo(bar string, baz ...int)

    * return 
        - Singe return values just list type
            * fun foo() int
        - Multiple return value list types surrounded by parentheses
            * func foo() (int, error)
            * The (result type, error) paradigma is a very common idiom.
        - Can use named return values
            * Initializes returned variable.
            * Return using return keyword on its own.
        - Can return addresses of local variables.
            * Automatically promoted from local memory (stact) to shared memory (heap)
        
    * Function as types
        - Can assign functions to variables or use as arguments and return values in functions
        - Type signature is like function signature, with no paramet names
            * var f func(string, string, int) (int, error)

    * Methods
        - Function that executes in context of a type
        - Format
            * func (g greeter) greet(){
                ....
            }
        - Receiver can be value or pointer
            * Value receiver gets copy of type
            * Pointer receiver gets pointer to type
        

    func sayMessage(msg string){
        fmt.Println(msg)
    }
    sayMessage("Hello Go")


    func sayMessage(greeting string, name string) {
	    fmt.Println(greeting, name)
    }
    sayMessage("Hello", "Tesla")   

    

    func sum(values ...int) {
	    fmt.Println(values)
	    result := 0
	    for _, v := range values {
		    result = result + v
	    }
	    fmt.Println("The sum is : ", result)
    }

    sum(1,2,3,4,5) ---> [1 2 3 4 5]
                        The sum is :  15


    - return -
    func sum(values ...int) int {
	    fmt.Println(values)
	    result := 0
	    for _, v := range values {
		    result = result + v
	    }
	    return result
    }
    s := sum(1,2,3,4,5)
    fmt.Println("The sum is : ", result) ---> [1 2 3 4 5]
                                              The sum is :  15


    - return and pointer -
    func sum(values ...int) *int {
	    fmt.Println(values)
	    result := 0
	    for _, v := range values {
		    result = result + v
	    }
	    return &result
    }
    s := sum(1, 2, 3, 4, 5)
    fmt.Println("The sum is : ", *s) ---> [1 2 3 4 5]
                                          The sum is :  15



    - named return -
    func sum(values ...int) (result int) {
	    fmt.Println(values)
	    for _, v := range values {
		    result = result + v
	    }
	    return result
    }


    - error -
    func divide(a, b float64) (float64, error) {
	    if b == 0.0 {
		    return 0.0, fmt.Errorf("Cannot divide by zero")
	    }
	    return a / b, nil
    }      
    d, err := divide(5.0, 0.0)
    if err != nil{
        fmt.Println(err)
        return
    }
    fmt.Println(d)


    - function with struct
    func main(){

        g := greeter{
            greeting : "Hello",
            name : "Tesla",
        }
        g.greet() 
    }

    type greeter struct{
        greeting string
        name     string
    }

    func (g greeter) greet(){
        fmt.Println(g.greeting, g.name)
    }



